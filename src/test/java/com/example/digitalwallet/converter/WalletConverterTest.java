package com.example.digitalwallet.converter;

import com.example.digitalwallet.entity.Wallet;
import com.example.digitalwallet.model.request.CreateWalletRequest;
import com.example.digitalwallet.model.response.WalletResponse;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.math.BigDecimal;

import static org.junit.jupiter.api.Assertions.*;

class WalletConverterTest {

    private WalletConverter walletConverter;
    private CreateWalletRequest createWalletRequest;
    private Wallet wallet;

    @BeforeEach
    void setUp() {
        walletConverter = new WalletConverter();

        createWalletRequest = new CreateWalletRequest();
        createWalletRequest.setName("Test Wallet");
        createWalletRequest.setCurrency("USD");
        createWalletRequest.setActiveForShopping(true);
        createWalletRequest.setActiveForWithdraw(true);

        wallet = new Wallet();
        wallet.setWalletId("wallet123");
        wallet.setCustomerId("customer123");
        wallet.setName("Test Wallet");
        wallet.setCurrency("USD");
        wallet.setActiveForShopping(true);
        wallet.setActiveForWithdraw(true);
        wallet.setBalance(BigDecimal.valueOf(1000));
        wallet.setUsableBalance(BigDecimal.valueOf(800));
    }

    @Test
    void testApplyCreateWalletRequest() {
        // Act
        Wallet result = walletConverter.apply("customer123", createWalletRequest);

        // Assert
        assertNotNull(result);
        assertNotNull(result.getWalletId());  // Should be generated by UUID
        assertEquals("customer123", result.getCustomerId());
        assertEquals(createWalletRequest.getName(), result.getName());
        assertEquals(createWalletRequest.getCurrency(), result.getCurrency());
        assertTrue(result.isActiveForShopping());
        assertTrue(result.isActiveForWithdraw());
        assertEquals(BigDecimal.ZERO, result.getBalance());
        assertEquals(BigDecimal.ZERO, result.getUsableBalance());
    }

    @Test
    void testApplyWalletToWalletResponse() {
        // Act
        WalletResponse response = walletConverter.apply(wallet);

        // Assert
        assertNotNull(response);
        assertEquals(wallet.getName(), response.getName());
        assertEquals(wallet.getCurrency(), response.getCurrency());
        assertEquals(wallet.isActiveForShopping(), response.isActiveForShopping());
        assertEquals(wallet.isActiveForWithdraw(), response.isActiveForWithdraw());
        assertEquals(wallet.getBalance(), response.getBalance());
        assertEquals(wallet.getUsableBalance(), response.getUsableBalance());
    }
}

